/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 * 
 * Code generated by Microsoft (R) AutoRest Code Generator 0.14.0.0
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

var models = require('./index');

var util = require('util');

/**
 * @class
 * Initializes a new instance of the ManagementLockObject class.
 * @constructor
 * Management lock information.
 * @member {string} [id] Gets or sets the Id of the lock.
 * 
 * @member {string} [type] Gets or sets the type of the lock.
 * 
 * @member {string} [name] Gets or sets the name of the lock.
 * 
 * @member {string} [level] Gets or sets the lock level of the management
 * lock. Possible values for this property include: 'NotSpecified',
 * 'CanNotDelete', 'ReadOnly'.
 * 
 * @member {string} [notes] Gets or sets the notes of the management lock.
 * 
 */
function ManagementLockObject(parameters) {
  ManagementLockObject['super_'].call(this, parameters);
  if (parameters !== null && parameters !== undefined) {
    if (parameters.id !== undefined) {
      this.id = parameters.id;
    }
    if (parameters.type !== undefined) {
      this.type = parameters.type;
    }
    if (parameters.name !== undefined) {
      this.name = parameters.name;
    }
    if (parameters.level !== undefined) {
      this.level = parameters.level;
    }
    if (parameters.notes !== undefined) {
      this.notes = parameters.notes;
    }
  }    
}

util.inherits(ManagementLockObject, models['BaseResource']);

/**
 * Validate the payload against the ManagementLockObject schema
 *
 * @param {JSON} payload
 *
 */
ManagementLockObject.prototype.serialize = function () {
  var payload = ManagementLockObject['super_'].prototype.serialize.call(this);
  if (this['id'] !== null && this['id'] !== undefined) {
    if (typeof this['id'].valueOf() !== 'string') {
      throw new Error('this[\'id\'] must be of type string.');
    }
    payload['id'] = this['id'];
  }

  if (this['type'] !== null && this['type'] !== undefined) {
    if (typeof this['type'].valueOf() !== 'string') {
      throw new Error('this[\'type\'] must be of type string.');
    }
    payload['type'] = this['type'];
  }

  if (this['name'] !== null && this['name'] !== undefined) {
    if (typeof this['name'].valueOf() !== 'string') {
      throw new Error('this[\'name\'] must be of type string.');
    }
    payload['name'] = this['name'];
  }

  if (this['level'] !== null && this['level'] !== undefined) {
    if (typeof this['level'].valueOf() !== 'string') {
      throw new Error('this[\'level\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['level'] = this['level'];
  }

  if (this['notes'] !== null && this['notes'] !== undefined) {
    if (typeof this['notes'].valueOf() !== 'string') {
      throw new Error('this[\'notes\'] must be of type string.');
    }
    if (payload['properties'] === null || payload['properties'] === undefined) {
      payload['properties'] = {};
    }
    payload['properties']['notes'] = this['notes'];
  }

  return payload;
};

/**
 * Deserialize the instance to ManagementLockObject schema
 *
 * @param {JSON} instance
 *
 */
ManagementLockObject.prototype.deserialize = function (instance) {
  ManagementLockObject['super_'].prototype.deserialize.call(this, instance);
  if (instance) {
    if (instance['id'] !== undefined) {
      this['id'] = instance['id'];
    }

    if (instance['type'] !== undefined) {
      this['type'] = instance['type'];
    }

    if (instance['name'] !== undefined) {
      this['name'] = instance['name'];
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['level'] !== undefined) {
        this['level'] = instance['properties']['level'];
      }
    }

    if (instance['properties'] !== null && instance['properties'] !== undefined) {
      if (instance['properties']['notes'] !== undefined) {
        this['notes'] = instance['properties']['notes'];
      }
    }
  }

  return this;
};

module.exports = ManagementLockObject;
