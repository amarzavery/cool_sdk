// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License. See License.txt in the project root for license information.

'use strict';

var util = require('util');
/**
 * Serializes the JSON Object. It serializes Buffer object to a 
 * 'base64' encoded string and a Date Object to a string 
 * compliant with ISO8601 format.
 * 
 * @param {Object} toSerialize
 * 
 * @returns {Object} serializedObject
 */
exports.serializeObject = function (toSerialize) {
  if (toSerialize === null || toSerialize === undefined) return null;
  if (Buffer.isBuffer(toSerialize)) {
    toSerialize = toSerialize.toString('base64');
    return toSerialize;
  }
  else if (toSerialize instanceof Date) {
    return toSerialize.toISOString();
  }
  else if (Array.isArray(toSerialize)) {
    var array = [];
    for (var i = 0; i < toSerialize.length; i++) {
      array.push(exports.serializeObject(toSerialize[i]));
    }
    return array;
  } else if (typeof toSerialize === 'object') {
    var dictionary = {};
    for (var property in toSerialize) {
      dictionary[property] = exports.serializeObject(toSerialize[property]);
    }
    return dictionary;
  }
  return toSerialize;
};

/**
 * Deserializes the given input in to a Date() object if it is compliant 
 * with ISO 8601 format
 * 
 * @param {string} input
 * 
 * @returns {Date} Date Object
 */
exports.deserializeDate = function (input) {
  if (exports.isValidISODateTime(input)) {
    return new Date(input);
  } else {
    throw new Error('Invalid input  \'' + input + '\'.  It cannot be deserialized as a Date().');
  }
};

/**
 * Validates if the given string is compliant with the ISO 8601 
 * Date and DateTime format
 * 
 * @param {string} dateString
 * 
 * @returns {bool} true - if valid, false otherwise
 */
exports.isValidISODateTime = function (dateString) {
  var re = /^([0-9]{4})-(1[0-2]|0[1-9])-(3[01]|0[1-9]|[12][0-9])?(T(2[0-3]|[01][0-9]):([0-5][0-9]):([0-5][0-9])(\.[0-9]+)?(Z|[+-](?:2[0-3]|[01][0-9]):[0-5][0-9]))?$/i;
  return re.test(dateString);
};

//TODO: Check for stream
exports.serialize = function (client, mapper, object) {
  var payload = {};
  if (requiresFlattening(mapper, object)) payload.properties = {};
  for (var key in mapper) {
    if (key.required) {
      if (object[key] === null || object[key] === undefined) {
        throw new Error(util.format('%s cannot be null or undefined.', key));
      }
    }

    if (object[key] !== null && object[key] !== undefined) {
      if (mapper[key].type.name === 'Number') {
        if (typeof object[key] !== 'number') {
          throw new Error(util.format('%s must be of type number.', key));
        }
        assignProperty(key, payload, object);
      } else if (mapper[key].type.name === 'Boolean') {
        if (typeof object[key] !== 'boolean') {
          throw new Error(util.format('%s must be of type boolean.', key));
        }
        assignProperty(key, payload, object);
      } else if (mapper[key].type.name === 'String') {
        if (typeof object[key].valueOf() !== 'string') {
          throw new Error(util.format('%s must be of type string.', key));
        }
        assignProperty(key, payload, object);
      } else if (mapper[key].type.name === 'Enum') {
        if (!mapper[key].type.allowedValues.some(function (item) { return item === object[key]; })) {
          throw new Error(util.format('%s  is not a valid value. The valid values are: %s', 
            object[key], JSON.stringify(mapper[key].type.allowedValues)));
        }
        assignProperty(key, payload, object);
      } else if (mapper[key].type.name === 'ByteArray') {
        if (!Buffer.isBuffer(object[key])) {
          throw new Error(util.format('%s must be of type Buffer.', key));
        }
        object[key] = object[key].toString('base64');
        assignProperty(key, payload, object);
      } else if (mapper[key].type.name === 'Date') {
        if (!(object[key] instanceof Date || 
          (typeof object[key].valueOf() === 'string' && !isNaN(Date.parse(object[key]))))) {
          throw new Error(util.format('%s must be an instanceof Date or a string in ISO8601 format.', key));
        }
        object[key] = (object[key] instanceof Date) ? object[key].toISOString().substring(0,10) : object[key];
        assignProperty(key, payload, object);
      } else if (mapper[key].type.name === 'DateTime') {
        if (!(object[key] instanceof Date || 
          (typeof object[key].valueOf() === 'string' && !isNaN(Date.parse(object[key]))))) {
          throw new Error(util.format('%s must be an instanceof Date or a string in ISO8601 format.', key));
        }
        object[key] = (object[key] instanceof Date) ? object[key].toISOString() : object[key];
        assignProperty(key, payload, object);
      } else if (mapper[key].type.name === 'DateTimeRfc1123') {
        if (!(object[key] instanceof Date || 
          (typeof object[key].valueOf() === 'string' && !isNaN(Date.parse(object[key]))))) {
          throw new Error(util.format('%s must be an instanceof Date or a string in RFC-1123 format.', key));
        }
        object[key] = (object[key] instanceof Date) ? object[key].toUTCString() : object[key];
        assignProperty(key, payload, object);
      } else if (mapper[key].type.name === 'TimeSpan') {
        if (!moment.isDuration(object[key])) {
          throw new Error(util.format('%s must be a TimeSpan.', key));
        }
        object[key] = object[key].toISOString();
        assignProperty(key, payload, object);
      }
    }
  }
  return payload;
};

function assignProperty(key, payload, object) {
  if (stringContainsProperties(key)) {
    payload.properties[key] = object[key];
  } else {
    payload[key] = object[key];
  }
}
function requiresFlattening(mapper, object) {
  return Object.keys(mapper).some(function (item) {
    return ((mapper[key].serializedName.match(/^properties\./ig) !== null) && 
            (object[key] !== null && object[key] !== undefined));
  });
}

function stringContainsProperties(prop) {
  return (prop.match(/^properties\.(\w+)/ig) !== null);
}

exports = module.exports;